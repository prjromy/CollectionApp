@model  BuisnessObject.ViewModel.CollectorLocationViewModel
@using BussinessLogic.Service
@{
    Layout = Request.IsAjaxRequest() ? null : "~/Views/Shared/_Layout.cshtml";

}

<link rel="stylesheet" type="text/css" href="http://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css" />
<div class="customer-create-main">
    <div class="box box-success">
        <div class="box-header with-border">


            <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                </div>
            @using (Html.BeginForm("Index", "CollectorLocationMap", FormMethod.Post, new { id = "createSubmitFormLoc" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Location Collection Map</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                    @Html.HiddenFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })


                 
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.Label("Collector Name", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @if (Model.Id != 0)

                                {
                                    var collectorname = CommonUtilityService.getCollectorName(Model.CollectorId);
                                    @Html.EditorFor(model => collectorname, new { htmlAttributes = new { @class = "form-control", @id = "CollectorName", autocomplete = "off" } })


                                    @Html.HiddenFor(x => x.CollectorId)
                                    @Html.ValidationMessageFor(model => model.CollectorId, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.TextBox("CollectorName", null, new { @class = "form-control col-md-8", @id = "CollectorName", autocomplete = "off" })
                                    @Html.HiddenFor(x => x.CollectorId)
                                    @Html.ValidationMessageFor(model => model.CollectorId, "", new { @class = "text-danger" })

                                }
                            
                            </div>
                            <div>
                                @Html.Label("Location Name", htmlAttributes: new { @class = "control-label col-md-2" })

                                @if (Model.Id != 0)
                                {
                                    var locationname = CommonUtilityService.LocationName(Model.LocationId);

                                    @Html.EditorFor(model => locationname, new { htmlAttributes = new { @class = "form-control", @id = "LocationName", autocomplete = "off" } })
                                    @Html.HiddenFor(x => x.LocationId)
                                }
                                else
                                {
                                    @*@Html.TextArea("MultipleLocationName", new { @class = "form-control", @id = "MultipleLocationName", autocomplete = "off",
                           cols = "50",
                            rows = "10",
                        } )
                         @Html.HiddenFor(x => x.LocationId)*@
                                    <div class="col-sm-4">

                                        @*@Html.DisplayNameFor(m => m.locationNames)*@
                                        @*<input type="hidden" class="select2-offscreen" id="make-hdn" style="width:100%" value="@Model.locationNames" />
                                        <input type="text" class="hidden" id="make" name="locationNames" value="@Model.locationNames" />*@
                                        @Html.TextAreaFor(x=>x.locationNames, 10, 40, new { id="locationnames"})
                                        @Html.HiddenFor(x=>x.LocationId)
                                        @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
                                    </div>



                                }
                            </div>


                            
                               

                              
                                


                       
                        </div>
                    </div>


                   
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">

                           

                            <input type="button" value="Create" class="btn btn-success btn-save-loc" />

                        </div>
                    </div>
                </div>
            
            }
        </div>
    </div>
</div>
<style>
    .select2-container {
        width: 200px;
    }
</style>
<link href="~/Select2 Css/select2.css" rel="stylesheet" />
<script src="~/Select2 js/select2.js"></script>


<link href="~/Content/ch-dialog.css" rel="stylesheet" />
<script src="~/Scripts/jquery-message-box.js"></script>
<script src="~/Scripts/typeahead.min.js"></script>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/ch-dialog.js"></script>
  <script>
      $(document).ready(function () {

          //The url we will send our get request to
          var attendeeUrl = '@Url.Action("GetAttendees", "CollectorLocationMap")';
          var pageSize = 20;

          $('#locationnames').select2(
          {
              placeholder: 'Enter name',
              //Does the user have to enter any data before sending the ajax request
              minimumInputLength: 0,
              allowClear: true,
              multiple: true,
              ajax: {
                  //How long the user has to pause their typing before sending the next request
                  quietMillis: 150,
                  //The url of the json service
                  url: attendeeUrl,
                  dataType: 'jsonp',
                  //Our search term and what page we are on
                  data: function (term, page) {
                      return {
                          pageSize: pageSize,
                          pageNum: page,
                          searchTerm: term
                      };
                  },
                  results: function (data, page) {

                      //Used to determine whether or not there are more results available,
                      //and if requests for more data should be sent in the infinite scrolling                    
                      var more = (page * pageSize) < data.Total;
                      return { results: data.Results, more: more };
                  }
              }
          });

      });
      $(function () {

          $("#LocationName").typeahead({

              hint: true,
              highlight: true,
              minLength: 1,
              source: function (request, response) {
                  $.ajax({
                      url: '/Suscription/LocationList/',
                      data: "{ 'prefix': '" + request + "'}",
                      dataType: "json",
                      type: "POST",
                      contentType: "application/json; charset=utf-8",
                      success: function (data) {
                          items = [];
                          map = {};
                          $.each(data, function (i, item) {
                              var id = item.Lid;
                              var name = item.LocationName;
                              map[name] = { id: id, name: name };
                              items.push(name);
                          });
                          response(items);
                          $(".dropdown-menu").css("height", "auto");
                          //$(".dropdown-menu").css("width", "");
                          $(".dropdown-menu").addClass("col-md-6");
                      },
                      error: function (response) {
                          alert(response.responseText);
                      },
                      failure: function (response) {
                          alert(response.responseText);
                      }
                  });

              },
              updater: function (item) {
                  $('#LocationId').val(map[item].id);
                  return item;
              }
          });

      })
  


      $.validator.unobtrusive.parse('#createSubmitFormLoc');
      $('.customer-create-main').on('click', '.btn-save-loc', function () {
          debugger;
          $('#createSubmitFormLoc').removeData("validator").removeData("unobtrusiveValidation");
          $.validator.unobtrusive.parse($('#createSubmitFormLoc'));
          if ($("#createSubmitFormLoc").valid()) {
              var formData = new FormData($('#createSubmitFormLoc')[0]);
              formData.append("CollectorId", $('#CollectorId').val())
              formData.append("locationNames", $('#locationNames').val())
              formData.append("locationname", $('#locationname').val())
              formData.append("LocationId", $('#LocationId').val())
              formData.append("Id", $('#Id').val())
              $.ajax({
                  url: "/CollectorLocationMap/CheckLocationExist",
                  type: 'post',
                  data: formData,
                  processData: false,
                  contentType: false,
                  async: false,
                  success: function (message) {
                      debugger
                      if (message.Success == false) {
                          ErrorAlert(message.Value + " Already Mapped", 6000);
                          return false;
                      }
                      else {
                          NewCustomerCreate();
                      }
                      
                  }
              })
           
          }


      });
      function NewCustomerCreate(e) {
          $.MessageBox({
              buttonDone: "Yes",
              buttonFail: "No",
              message: " Are you sure?"
          }).done(function () {
              //$(".checkboxCert:checked").removeAttr('disabled');
              $('#createSubmitFormLoc').ajaxSubmit({
                  success: function (result) {
                      //var url;
                      debugger;
                      if (result.Success) {
                          $.ajax({
                              url: "/CollectorLocationMap/CollectorVsLocationList",
                              type: 'post',
                              async: false,
                              success: function (data) {
                                  debugger
                                  $('section.content').html(data);
                                  SuccessAlert(result.Msg, 5000);
                                  document.getElementById('alert-success').scrollIntoView();
                              }
                          })
                      } else {
                          ErrorAlert(result.Msg, 5000);
                          document.getElementById('alert-error').scrollIntoView();
                      }
                  },
                  error: function (data) {
                      ErrorAlert(data.responseText, 15000)
                  }
              });
          }).fail(function () {
          });
      }

      //        //hint: true,
      //        //highlight: true,
      //        multiselect: true,
      //        focus: updateTextBox,
      //        select: updateTextBox,

      //        source: function (request, response) {
      //            $.ajax({
      //                url: '/Suscription/LocationList/',
      //                data: "{ 'prefix': '" + request.term + "'}",
      //                dataType: "json",
      //                type: "POST",
      //                contentType: "application/json; charset=utf-8",
      //                success: function (data) {
      //                    debugger;
      //                    //debugger;
      //                    //items = [];
      //                    //map = {};
      //                    //$.each(data, function (i, item) {
      //                    //    var id = item.Lid;
      //                    //    var name = item.LocationName;
      //                    //    map[name] = { id: id, name: name };
      //                    //    items.push(name);
      //                    //});
      //                    //response(items);
      //                    //$(".dropdown-menu").css("height", "auto");
      //                    ////$(".dropdown-menu").css("width", "");
      //                    //$(".dropdown-menu").addClass("col-md-8");
      //                    response(data);
      //                },
                    
      //            });
      //        }
      //    })
      //         .autocomplete('instance')._renderItem = function (ul, item) {
      //             return $('<li>').append('<a><b>' + item.LocationId + '</b> &nbsp; &nbsp;' + item.LocationName + '</a>')
      //             //.append('<a>'+item.EmployeeName+'</a>')
      //             .appendTo(ul);

      //         }
      //})
      $(function () {

          function split(val) {
              return val.split(/,\s*/);
          }
          function extractLast(term) {
              return split(term).pop();
          }

          $("#locationnames")
        // don't navigate away from the field on tab when selecting an item  
        .on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB &&
                $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
        })
          .autocomplete({
              minLength: 0,
              source: function (request, response) {
                  @*$.getJSON('@Url.Action("LocationList", "Suscription")', {
                      prefix: extractLast(request.term)
                  }, response);*@
                  $.ajax({
                      url: '/Suscription/LocationList/',
                      prefix: extractLast(request.term),
                      dataType: "json",
                      type: "POST",
                      contentType: "application/json; charset=utf-8",
                      success: function (data) {
                          debugger;
                          response(data);
                      }

                  });
              },
              focus: function () {
                  debugger;
                  // prevent value inserted on focus  
                  return false;
              },
              select: function (event, ui) {
                  debugger;
                  var terms = split(this.va);
                 
                  // remove the current input  
                  terms.pop();
                  // add the selected item  
                  terms.push(ui.item.LocationName);
                  // add placeholder to get the comma-and-space at the end  
                  terms.push("");
                  this.value = terms.join(", ");
                  var lidterms = split(this.Lid);

                  // remove the current input  
                  lidterms.pop();
                  // add the selected item  
                  lidterms.push(ui.item.Lid);
                  // add placeholder to get the comma-and-space at the end  
                  terms.push("");
                  this.value = terms.join(", ");
                  $('#EmployeeId').val(ui.item.Lid);
                  return false;
              }
          });
      })
      $(document).ready(function () {
          debugger
          select2Dropdown('make-hdn', 'make', 'Search for make(s)', 'SearchMake', 'GetMake', true);
      //});
      //$(document).ready(function(){
          function select2Dropdown(hiddenID, valueID, ph, listAction, getAction, isMultiple) 
          {

              var sid = '#' + hiddenID;
              $(sid).select2({
                  placeholder: ph,
                  minimumInputLength: 2,
                  //allowClear: true,
                  multiple: isMultiple,  
                  tokenSeparators: ['/',',',';',' '] ,

                  tags: true,
                  ajax: {
                  
                      url: "/api/MultiSelectLocation/" + listAction,
                      dataType: 'json',
                      //data: function (term, page) {
                      data: function (term) {
                          for (var key in term) {
                              debugger;
                              return {
                                  id: term[key] // search term
                              };
                          }
                     
                      },
                      processResults: function (data) {

                          return {
                              results: $.map(data, function (obj) {
                                  return {
                                      id: obj.id,
                                      text: obj.text
                                  };
                              })
                          };
                      },
                      cache: true

                  },
                  initSelection: function (element, callback) {
                      // the input tag has a value attribute preloaded that points to a preselected make's id
                      // this function resolves that id attribute to an object that select2 can render
                      // using its formatResult renderer - that way the make text is shown preselected
                      var id = $('#' + valueID).val();
                      if (id !== null && id.length > 0) {
                          $.ajax("/api/MultiSelectLocation/" + getAction + "/" + id, {
                              dataType: "json"
                          }).done(function (data) { callback(data); });
                      }
                  },
                  templateResult: s2FormatResult,
                  templateSelection: function(obj) {
              debugger;
              var $container = jQuery("<span class='selectedCountry'>" + obj.text + "</span>");
              return $container;
          }
                  //formatResult : function(response)
                  //{debugger;
                  //    data=response.data;
                  //    console.log(data);
                  //    this.description =
                  //        '<div id="fmu_select2_ajax_result">' +
                  //            "<div>Nom du produit : " + data.text + "</div>" +
                     
                  //        '</div>'
                  //    ;
                  //    return this.description;
                  //},
                  //formatSelection: function(response)
                  //{
                  //    data=response.data;
                  //    return   data.text;
                  //},
                  //escapeMarkup: function (m) { return m; },
                  //dropdownCssClass: "bigdrop"
              });
          


              $(document.body).on("change", sid, function (ev) {
                  debugger
                  var choice;
                  var values = $(ev.target).select2("val");
                  // This is assuming the value will be an array of strings.
                  // Convert to a comma-delimited string to set the value.
                  if (values !== null && values.length > 0) {
                      for (var i = 0; i < values.length; i++) {
                          if (typeof choice !== 'undefined') {
                              choice += ",";
                              choice += values[i];
                          }
                          else {
                              choice = values[i];
                          }
                      }
                  }

                  // Set the value so that MVC will load the form values in the postback.
                  $('#' + valueID).val(choice);
              });
          }

          function s2FormatResult(obj) {
              debugger;
              return obj.text;
          }

          function s2FormatSelection(obj) {
              debugger;
              var $container = jQuery("<span class='selectedCountry'>" + obj.text + "</span>");
              return $container;
          }
      });
      $(function () {
          $("#CollectorName").typeahead({

              hint: true,
              highlight: true,
              minLength: 1,
              source: function (request, response) {
                  $.ajax({
                      url: '/Collection/GetCollector/',
                      data: "{ 'prefix': '" + request + "'}",
                      dataType: "json",
                      type: "POST",
                      contentType: "application/json; charset=utf-8",
                      success: function (data) {
                          debugger;
                          if (data === null) {
                              ErrorAlert("No data Match", 3000);
                              return false;
                          }
                          items = [];
                          map = {};
                          $.each(data, function (i, item) {
                              var id = item.CollectorID;
                              var name = item.CollectorName;
                              map[name] = { id: id, name: name };
                              items.push(name);
                          });
                          response(items);
                          $(".dropdown-menu").css("height", "auto");
                          //$(".dropdown-menu").css("width", "");
                          $(".dropdown-menu").addClass("col-md-8");
                      },
                      error: function (response) {
                          debugger;
                          alert(response.responseText);
                      },
                      failure: function (response) {
                          debugger;
                          alert(response.responseText);
                      }
                  });
              },
              updater: function (item) {
                  $('#CollectorId').val(map[item].id);
                  return item;
              }
          });
      })
  </script>