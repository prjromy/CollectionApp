

@model  BuisnessObject.ViewModel.MainViewModel.SubscriptionViewModel
@using BussinessLogic.Service
@using ChannakyaCustomeDatePicker.Helper
@using BussinessLogic.CustomHelper
@{
    Layout = Request.IsAjaxRequest() ? null : "~/Views/Shared/_Layout.cshtml";

}
<link href="~/bootstrap/css/bootstrap.css" rel="stylesheet" />
@*<script src="~/Scripts/jquery-3.1.1.js"></script>*@
<script src="~/Scripts/typeahead.min.js"></script>
<div id='common-pop-up-div' class='modal fade' role='dialog'></div>
<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <h4 class="modal-title">Add Subscription</h4>
            <span class="close" id="closeTop" data-dismiss="modal" aria-hidden="true">&times;</span>

        </div>
        <div class="modal-body">
            <div class="suscription-create-main">
                <div class="box box-success">
                    <div class="box-header with-border">


                        <div class="box-tools pull-right">
                            @*<button class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>*@
                        </div><!-- /.box-tools -->
                        @*@using (Html.BeginForm("Create", "Suscription", FormMethod.Post, new { id = "createSubmitFormSuscription" }))
                {*@
                        <form method="post" id="createSubmitFormSuscription">
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                <h4>Subscription Create</h4>
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                @Html.HiddenFor(model => model.Subsid, new { htmlAttributes = new { @class = "form-control" } })


                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">

                                        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })

                                        @Html.HiddenFor(model => model.CustId)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.LedgerId, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownListFor(model => model.LedgerId, CommonUtilityService.LedgerList(), htmlAttributes: new { @class = "form-control col-md-7" })
                                        @*@Html.DropDownList("Please Select", CommonUtilityService.CustomerTypeList(), new { htmlAttributes = new { @class = "form-control " } })*@


                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.MonthlyAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MonthlyAmount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MonthlyAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.LocationID, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @if (Model.Subsid != 0)
                                        {
                                            var locationName = CommonUtilityService.LocationName(Model.LocationID);
                                            @Html.EditorFor(model => locationName, new { htmlAttributes = new { @class = "form-control", @id = "LocationName", autocomplete = "off" } })
                                            @Html.HiddenFor(x => x.LocationID)
                                        }
                                        else
                                        {

                                            @Html.EditorFor(model => model.LocationName, new { htmlAttributes = new { @class = "form-control", @id = "LocationName", autocomplete = "off" } })
                                            @Html.HiddenFor(x => x.LocationID)

                                        }

                                        @Html.ValidationMessageFor(model => model.LocationName, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.EffectiveDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @*@Html.DatePicker(model => model.EffectiveDate, true)*@
                                        @if (Model.Subsid != 0)
                                        {
                                            var EffectiveDate = ViewBag.EffectiveDate;
                                            <an-date-picker is-input date-ad=@EffectiveDate></an-date-picker>
                                        }
                                        else
                                        {
                                            <an-date-picker is-input></an-date-picker>

                                        }
                                        @Html.ValidationMessageFor(model => model.EffectiveDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.DharautiAmt, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">

                                        @Html.EditorFor(model => model.DharautiAmt, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.DharautiAmt, "", new { @class = "text-danger" })

                                        @Html.HiddenFor(model => model.DharautiAmt)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.RegistrationFee, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">

                                        @Html.EditorFor(model => model.RegistrationFee, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RegistrationFee, "", new { @class = "text-danger" })

                                        @Html.HiddenFor(model => model.RegistrationFee)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.ChqLabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.Remarks, 10, 40, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        @if (Model.Subsid != 0)
                                        {
                                            <input type="button" value="Edit" class="btn btn-success btn-save" />
                                        }
                                        else
                                        {
                                            <input type="button" value="Create" class="btn btn-success btn-save" />

                                        }

                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/jquery-message-box.js"></script>
<link href="~/Content/ch-dialog.css" rel="stylesheet" />
@*<link href="~/Scripts/DatePicker/DatePicker.css" rel="stylesheet" />
<script src="~/Scripts/DatePicker/Channakya-DatePicker.js"></script>*@



<script>
    $.validator.unobtrusive.parse('#createSubmitFormSuscription');
    $('#createSubmitFormSuscription').on('click',".btn-save",function () {
        debugger;
        $('#createSubmitFormSuscription').removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($('#createSubmitFormSuscription'));
        if ($("#createSubmitFormSuscription").valid()) {
            var customerId = $('#CustId').val();
            var Date = $('.suscription-create-main').find('an-date-picker').get()[0].dateADWithTime;
            var formData = new FormData($("#createSubmitFormSuscription")[0]);
            formData.append("EffectiveDate", Date)
            $.MessageBox({
                buttonDone: "Yes",
                buttonFail: "No",
                message: " Are you sure?"
            }).done(function () {
                //$(".checkboxCert:checked").removeAttr('disabled');
                //$('#createSubmitFormSuscription').ajaxSubmit({
                debugger;
                $.ajax({

                    url: '@Url.Action("Create", "Suscription")',
                    type: 'POST',
                    data: formData,
                    async: false,

                    success: function (result) {
                        //var url;
                        debugger;
                        if (result.Success) {
                            $.ajax({
                                url: "/Suscription/List",
                                type: 'post',
                                async: false,
                                data: { customerId: customerId },
                                success: function (data) {
                                    debugger
                                    $('#account-pop-up-div').modal('toggle');
                                    $('.suscription-detail').html("");
                                    $('.suscription-detail').html(data);
                                    SuccessAlert(result.Msg, 5000);
                                    document.getElementById('alert-success').scrollIntoView();
                                }
                            })
                        } else {
                            ErrorAlert(result.Msg, 5000);
                            document.getElementById('alert-error').scrollIntoView();
                        }
                    },
                    error: function (data) {
                        ErrorAlert(data.responseText, 15000)
                    },
                    cache: false,
                    contentType: false,
                    processData: false
                });
            }).fail(function () {
            });
        }


    });
    //function NewCustomerCreate(e) {
      
    //}


    $(function () {
        $("#LocationName").typeahead({

            hint: true,
            highlight: true,
            minLength: 1,
            source: function (request, response) {
                $.ajax({
                    url: '/Suscription/LocationList/',
                    data: "{ 'prefix': '" + request + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        items = [];
                        map = {};
                        $.each(data, function (i, item) {
                            var id = item.Lid;
                            var name = item.LocationName;
                            map[name] = { id: id, name: name };
                            items.push(name);
                        });
                        response(items);
                        $(".dropdown-menu").css("height", "auto");
                        //$(".dropdown-menu").css("width", "");
                        $(".dropdown-menu").addClass("col-md-6");
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            updater: function (item) {
                $('#LocationID').val(map[item].id);
                return item;
            }
        });
    })
</script>